/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package steganographie;

import a.util.ImageFileFilter;
import a.util.JSFileChooser;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.imageio.stream.FileImageOutputStream;
import javax.swing.JFileChooser;

/**
 *
 * @author p1002873
 */
public class SgPanel2 extends javax.swing.JPanel {

    /**
     * Creates new form SgPanel2
     */
    public SgPanel2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        iImgA = new steganographie.SgImgPanel(true);
        jScrollPane2 = new javax.swing.JScrollPane();
        iImgB = new steganographie.SgImgPanel(true);
        jScrollPane3 = new javax.swing.JScrollPane();
        iImgD = new steganographie.SgImgPanel(true);
        jScrollPane4 = new javax.swing.JScrollPane();
        iImgC = new steganographie.SgImgPanel(true);
        jScrollPane5 = new javax.swing.JScrollPane();
        iImgE = new steganographie.SgImgPanel(true);
        iEncoder = new javax.swing.JButton();
        iEnregistrer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        iDecoder = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        saveD = new javax.swing.JButton();
        saveE = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(965, 620));

        iImgA.setPreferredSize(new java.awt.Dimension(20, 24));

        javax.swing.GroupLayout iImgALayout = new javax.swing.GroupLayout(iImgA);
        iImgA.setLayout(iImgALayout);
        iImgALayout.setHorizontalGroup(
            iImgALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        iImgALayout.setVerticalGroup(
            iImgALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(iImgA);

        iImgB.setPreferredSize(new java.awt.Dimension(20, 24));

        javax.swing.GroupLayout iImgBLayout = new javax.swing.GroupLayout(iImgB);
        iImgB.setLayout(iImgBLayout);
        iImgBLayout.setHorizontalGroup(
            iImgBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        iImgBLayout.setVerticalGroup(
            iImgBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(iImgB);

        iImgD.setPreferredSize(new java.awt.Dimension(20, 24));

        javax.swing.GroupLayout iImgDLayout = new javax.swing.GroupLayout(iImgD);
        iImgD.setLayout(iImgDLayout);
        iImgDLayout.setHorizontalGroup(
            iImgDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        iImgDLayout.setVerticalGroup(
            iImgDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(iImgD);

        iImgC.setPreferredSize(new java.awt.Dimension(20, 24));

        javax.swing.GroupLayout iImgCLayout = new javax.swing.GroupLayout(iImgC);
        iImgC.setLayout(iImgCLayout);
        iImgCLayout.setHorizontalGroup(
            iImgCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        iImgCLayout.setVerticalGroup(
            iImgCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(iImgC);

        iImgE.setPreferredSize(new java.awt.Dimension(20, 26));

        javax.swing.GroupLayout iImgELayout = new javax.swing.GroupLayout(iImgE);
        iImgE.setLayout(iImgELayout);
        iImgELayout.setHorizontalGroup(
            iImgELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        iImgELayout.setVerticalGroup(
            iImgELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(iImgE);

        iEncoder.setText("Encoder");
        iEncoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iEncoderActionPerformed(evt);
            }
        });

        iEnregistrer.setText("Enregistrer");
        iEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iEnregistrerActionPerformed(evt);
            }
        });

        jLabel1.setText("[A] Image contenante");

        jLabel2.setText("[B] Image à cacher");

        iDecoder.setText("Décoder");
        iDecoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iDecoderActionPerformed(evt);
            }
        });

        jLabel3.setText("[C] Résutlat de la stéganographie avec l'image cachée");

        jLabel4.setText("[D] Image contenante retrouvée");

        jLabel5.setText("[E] Image cachée");

        saveD.setText("Enregistrer [D]");
        saveD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDActionPerformed(evt);
            }
        });

        saveE.setText("Enregistrer [E]");
        saveE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(iEncoder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(iEnregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(iDecoder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)))
                    .addComponent(jLabel1))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(saveD, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(saveE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(11, 11, 11)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iEncoder)
                    .addComponent(iEnregistrer)
                    .addComponent(iDecoder)
                    .addComponent(saveD)
                    .addComponent(saveE))
                .addContainerGap(93, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void iEncoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iEncoderActionPerformed
 
        
        SgImgPanel siImgA = (SgImgPanel) iImgA;
        SgImgPanel siImgB = (SgImgPanel) iImgB;
        SgImgPanel siImgC = (SgImgPanel) iImgC;

        SgImage Simage = new SgImage(siImgA.getImageB(), 4);
        SgImage Eimage = new SgImage(siImgB.getImageB(), 4);

        
        Simage.encodeImage(Eimage, false);
        
        siImgC.setImageB(Simage.imgOut);

        
        
    }//GEN-LAST:event_iEncoderActionPerformed

    private void iEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iEnregistrerActionPerformed
       
        SgImgPanel siImgC = (SgImgPanel) iImgC;
        
        JSFileChooser fc = new JSFileChooser();

        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.addChoosableFileFilter(new ImageFileFilter(".bmp", "Fichier image au format Bitmap"));

        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {

            try {

                String ext = fc.getFileFilter().getDescription();
                File file = new File(fc.getSelectedFile().getAbsolutePath() + ext);
                FileImageOutputStream fios = new FileImageOutputStream(file);
                BufferedImage tmpBuf = siImgC.getImageB();
                ImageIO.write(tmpBuf, ext.substring(1, ext.length()), fios);
                fios.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_iEnregistrerActionPerformed

    private void iDecoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iDecoderActionPerformed
        
        SgImgPanel siImgC = (SgImgPanel) iImgC;
        
        SgImgPanel siImgD = (SgImgPanel) iImgD;
        SgImgPanel siImgE = (SgImgPanel) iImgE;
        
        SgImage Uimage = new SgImage(siImgC.getImageB(), 4);
        Uimage.decodeImage();
        
        siImgD.setImageB(siImgC.getImageB());
        siImgE.setImageB(Uimage.imgOut);
        
    }//GEN-LAST:event_iDecoderActionPerformed

    private void saveEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEActionPerformed
        SgImgPanel siImgE = (SgImgPanel) iImgE;
        
        JSFileChooser fc = new JSFileChooser();

        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.addChoosableFileFilter(new ImageFileFilter(".bmp", "Fichier image au format Bitmap"));

        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {

            try {

                String ext = fc.getFileFilter().getDescription();
                File file = new File(fc.getSelectedFile().getAbsolutePath() + ext);
                FileImageOutputStream fios = new FileImageOutputStream(file);
                BufferedImage tmpBuf = siImgE.getImageB();
                ImageIO.write(tmpBuf, ext.substring(1, ext.length()), fios);
                fios.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_saveEActionPerformed

    private void saveDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDActionPerformed
        SgImgPanel siImgD = (SgImgPanel) iImgD;
        
        JSFileChooser fc = new JSFileChooser();

        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.addChoosableFileFilter(new ImageFileFilter(".bmp", "Fichier image au format Bitmap"));

        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {

            try {

                String ext = fc.getFileFilter().getDescription();
                File file = new File(fc.getSelectedFile().getAbsolutePath() + ext);
                FileImageOutputStream fios = new FileImageOutputStream(file);
                BufferedImage tmpBuf = siImgD.getImageB();
                ImageIO.write(tmpBuf, ext.substring(1, ext.length()), fios);
                fios.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_saveDActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton iDecoder;
    private javax.swing.JButton iEncoder;
    private javax.swing.JButton iEnregistrer;
    private javax.swing.JPanel iImgA;
    private javax.swing.JPanel iImgB;
    private javax.swing.JPanel iImgC;
    private javax.swing.JPanel iImgD;
    private javax.swing.JPanel iImgE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton saveD;
    private javax.swing.JButton saveE;
    // End of variables declaration//GEN-END:variables
}
